const int calibrationLed = 13;                      
const int MQ_PIN = A0;                                
int RL_VALUE = 1;                                    
float RO_CLEAN_AIR_FACTOR =9.86;                     
int CALIBARAION_SAMPLE_TIMES=50;                    
int CALIBRATION_SAMPLE_INTERVAL=500;                
int READ_SAMPLE_INTERVAL=50;                       
int READ_SAMPLE_TIMES=5;                          
#define         GAS_NOx            0   
#define         GAS_CO2            1   
#define         GAS_Smoke          2    
float           NOxCurve[3]  =  {2.3,0.21,-0.47};   
float           CO2Curve[3]  =  {2.3,0.72,-0.34};     
float           SmokeCurve[3] ={2.3,0.53,-0.44};                                                       
float           Ro           =  10;                 
void setup()
{ 
   Serial.begin(115200);
  pinMode(calibrationLed,OUTPUT);
  digitalWrite(calibrationLed,HIGH);
  Serial.print("Calibrating...");                        
  Ro = MQCalibration(MQ_PIN);                                  
  digitalWrite(calibrationLed,LOW);              
    Serial.println("done!");                                 
  Serial.print("Ro= ");
  Serial.print(Ro);
  Serial.println("kohm\n");
  delay(2000);
}
 
void loop()
{  
  long iPPM_NOx = 0;
  long iPPM_CO2 = 0;
  long iPPM_Smoke = 0;
  iPPM_NOx = MQGetGasPercentage(MQRead(MQ_PIN)/Ro,GAS_NOx);
  iPPM_CO2 = MQGetGasPercentage(MQRead(MQ_PIN)/Ro,GAS_CO2);
  iPPM_Smoke = MQGetGasPercentage(MQRead(MQ_PIN)/Ro,GAS_Smoke);
  Serial.println("**************************** CONCETRATION OF GASES ****************************");
   Serial.print("NOx: ");
   Serial.print(iPPM_NOx);
   Serial.println(" ppm");   
   Serial.print("CO2: ");
   Serial.print(iPPM_CO2);
   Serial.println(" ppm");    
   Serial.print("Smoke: ");
   Serial.print(iPPM_Smoke);
   Serial.println(" ppm");  
   Serial.println("*******************************************************************************\n");
   Serial.println();
   delay(500);
}
float MQResistanceCalculation(int raw_adc)
{
  return ( ((float)RL_VALUE*(1023-raw_adc)/raw_adc));
}
float MQCalibration(int mq_pin)
{
  int i;
  float val=0;

  for (i=0;i<CALIBARAION_SAMPLE_TIMES;i++) {           
    val += MQResistanceCalculation(analogRead(mq_pin));
    delay(CALIBRATION_SAMPLE_INTERVAL);
  }
  val = val/CALIBARAION_SAMPLE_TIMES;                   
  val = val/RO_CLEAN_AIR_FACTOR;                                                         
  return val;                                                     
}
float MQRead(int mq_pin)
{
  int i;
  float rs=0;
  for (i=0;i<READ_SAMPLE_TIMES;i++) {
    rs += MQResistanceCalculation(analogRead(mq_pin));
    delay(READ_SAMPLE_INTERVAL);
  }
  rs = rs/READ_SAMPLE_TIMES;
  return rs;  
}
long MQGetGasPercentage(float rs_ro_ratio, int gas_id)
{
  if ( gas_id == GAS_NOx ) {
     return MQGetPercentage(rs_ro_ratio,NOxCurve);
  } else if ( gas_id == GAS_CO2 ) {
     return MQGetPercentage(rs_ro_ratio,CO2Curve);
  } else if ( gas_id == GAS_Smoke ) {
     return MQGetPercentage(rs_ro_ratio,SmokeCurve);
  }    
  return 0;
}
long  MQGetPercentage(float rs_ro_ratio, float *pcurve)
{
  return (pow(10,( ((log(rs_ro_ratio)-pcurve[1])/pcurve[2]) + pcurve[0])));
}